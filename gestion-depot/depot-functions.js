/**
 * Fonctions JavaScript pour la gestion des d√©p√¥ts
 * Compatible avec votre base "client" existante
 * VERSION SANS CONFLITS
 */

// Variables globales pour les d√©p√¥ts (√©viter les conflits)
let depotsListData = [];
let statutsListData = [];
let currentEditingDepotData = null;

/**
 * Initialiser le module d√©p√¥ts
 */
async function initializeDepots() {
    console.log('üîÑ Initialisation du module d√©p√¥ts...');
    
    try {
        // Charger les statuts d'abord
        await loadStatuts();
        
        // Charger les d√©p√¥ts
        await loadDepots();
        
        // Initialiser la recherche
        initializeDepotSearch();
        
        console.log('‚úÖ Module d√©p√¥ts initialis√©');
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation des d√©p√¥ts:', error);
    }
}

/**
 * Charger tous les statuts
 */
async function loadStatuts() {
    try {
        const response = await API.statuts.getAll();
        
        if (response.success) {
            statutsListData = response.data;
            console.log(`‚úÖ ${statutsListData.length} statuts charg√©s`);
        } else {
            console.warn('‚ö†Ô∏è Erreur lors du chargement des statuts, utilisation des statuts par d√©faut');
            // Statuts par d√©faut si la table n'existe pas encore
            statutsListData = [
                {id: 1, nom: 'En attente', couleur_hex: '#ffc107'},
                {id: 2, nom: 'En cours', couleur_hex: '#17a2b8'},
                {id: 3, nom: 'Pr√™t', couleur_hex: '#28a745'},
                {id: 4, nom: 'R√©cup√©r√©', couleur_hex: '#6c757d'},
                {id: 5, nom: 'Abandonn√©', couleur_hex: '#dc3545'}
            ];
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des statuts:', error);
        // Utiliser les statuts par d√©faut en cas d'erreur
        statutsListData = [
            {id: 1, nom: 'En attente', couleur_hex: '#ffc107'},
            {id: 2, nom: 'En cours', couleur_hex: '#17a2b8'},
            {id: 3, nom: 'Pr√™t', couleur_hex: '#28a745'},
            {id: 4, nom: 'R√©cup√©r√©', couleur_hex: '#6c757d'},
            {id: 5, nom: 'Abandonn√©', couleur_hex: '#dc3545'}
        ];
    }
}

/**
 * Charger tous les d√©p√¥ts
 */
async function loadDepots() {
    try {
        console.log('üìã Chargement des d√©p√¥ts...');
        
        // Pour l'instant, cr√©er des d√©p√¥ts de d√©monstration
        // Une fois que vous aurez la table depots, on utilisera l'API
        if (typeof API.depots !== 'undefined' && API.depots.getAll) {
            const response = await API.depots.getAll();
            
            if (response.success) {
                depotsListData = response.data;
                displayDepots(depotsListData);
                console.log(`‚úÖ ${depotsListData.length} d√©p√¥ts charg√©s`);
                return;
            }
        }
        
        // D√©p√¥ts de d√©monstration si la table n'existe pas encore
        console.log('‚ÑπÔ∏è Table d√©p√¥ts non encore cr√©√©e, affichage de donn√©es de test');
        depotsListData = [
            {
                id: 1,
                client_nom: 'Jean Dupont',
                description: 'Ordinateur portable ne d√©marre plus',
                statut_nom: 'En attente',
                statut_couleur: '#ffc107',
                date_depot: '2025-01-01',
                date_prevue: '2025-01-05'
            },
            {
                id: 2,
                client_nom: 'Marie Martin',
                description: 'Smartphone √©cran cass√©',
                statut_nom: 'En cours',
                statut_couleur: '#17a2b8',
                date_depot: '2024-12-30',
                date_prevue: '2025-01-03'
            }
        ];
        
        displayDepots(depotsListData);
        console.log(`‚úÖ ${depotsListData.length} d√©p√¥ts de test affich√©s`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du chargement des d√©p√¥ts:', error);
        displayDepots([]);
    }
}

/**
 * Afficher les d√©p√¥ts dans le tableau
 */
function displayDepots(depotsToDisplay) {
    const tbody = document.getElementById('depots-tbody');
    
    if (!tbody) {
        console.warn('‚ö†Ô∏è √âl√©ment depots-tbody non trouv√©');
        return;
    }
    
    if (!depotsToDisplay || depotsToDisplay.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">Aucun d√©p√¥t trouv√©</td></tr>';
        return;
    }
    
    tbody.innerHTML = depotsToDisplay.map(depot => {
        const statutColor = depot.statut_couleur || '#007bff';
        const statutNom = depot.statut_nom || 'Non d√©fini';
        
        return `
            <tr>
                <td>${depot.id}</td>
                <td>${depot.client_nom || 'Client inconnu'}</td>
                <td>${depot.description || ''}</td>
                <td>
                    <span class="badge" style="background-color: ${statutColor}">
                        ${statutNom}
                    </span>
                </td>
                <td>${formatDate(depot.date_depot)}</td>
                <td>${formatDate(depot.date_prevue)}</td>
                <td>
                    <button class="btn btn-sm btn-primary" onclick="editDepot(${depot.id})" title="Modifier">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-info" onclick="viewDepot(${depot.id})" title="Voir d√©tails">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-success" onclick="generatePDF(${depot.id})" title="G√©n√©rer PDF">
                        <i class="fas fa-file-pdf"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteDepot(${depot.id})" title="Supprimer">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `;
    }).join('');
}

/**
 * Filtrer les d√©p√¥ts
 */
function filterDepots(filterType = 'all') {
    console.log(`üîç Filtrage des d√©p√¥ts: ${filterType}`);
    
    let filteredDepots = [...depotsListData];
    
    switch (filterType) {
        case 'en_attente':
            filteredDepots = depotsListData.filter(depot => depot.statut_nom === 'En attente');
            break;
        case 'en_cours':
            filteredDepots = depotsListData.filter(depot => depot.statut_nom === 'En cours');
            break;
        case 'pret':
            filteredDepots = depotsListData.filter(depot => depot.statut_nom === 'Pr√™t');
            break;
        case 'recupere':
            filteredDepots = depotsListData.filter(depot => depot.statut_nom === 'R√©cup√©r√©');
            break;
        case 'all':
        default:
            filteredDepots = [...depotsListData];
            break;
    }
    
    displayDepots(filteredDepots);
    console.log(`üìä ${filteredDepots.length} d√©p√¥ts affich√©s apr√®s filtrage`);
}

/**
 * Initialiser la recherche de d√©p√¥ts
 */
function initializeDepotSearch() {
    const searchInput = document.getElementById('depot-search');
    
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            
            if (searchTerm === '') {
                displayDepots(depotsListData);
            } else {
                const filteredDepots = depotsListData.filter(depot => 
                    (depot.client_nom && depot.client_nom.toLowerCase().includes(searchTerm)) ||
                    (depot.description && depot.description.toLowerCase().includes(searchTerm)) ||
                    (depot.statut_nom && depot.statut_nom.toLowerCase().includes(searchTerm))
                );
                
                displayDepots(filteredDepots);
            }
        });
    }
}

/**
 * Afficher la modale de cr√©ation de d√©p√¥t
 */
function showCreateDepotModal() {
    console.log('üìù Ouverture de la modale de cr√©ation de d√©p√¥t');
    currentEditingDepotData = null;
    
    // R√©initialiser le formulaire
    const form = document.getElementById('depot-form');
    if (form) {
        form.reset();
    }
    
    // Mettre √† jour le titre de la modale
    const modalTitle = document.getElementById('depot-modal-title');
    if (modalTitle) {
        modalTitle.textContent = 'Nouveau d√©p√¥t';
    }
    
    // Remplir la liste des clients
    populateClientSelect();
    
    // Remplir la liste des statuts
    populateStatutSelect();
    
    // Afficher la modale
    const modal = document.getElementById('depot-modal');
    if (modal) {
        modal.style.display = 'block';
    }
}

/**
 * Remplir la liste d√©roulante des clients
 */
async function populateClientSelect() {
    const select = document.getElementById('depot-client-id');
    
    if (!select) return;
    
    try {
        const response = await API.clients.getAll();
        
        if (response.success) {
            select.innerHTML = '<option value="">S√©lectionner un client...</option>';
            
            response.data.forEach(client => {
                const option = document.createElement('option');
                option.value = client.id;
                option.textContent = `${client.prenom} ${client.nom}`;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Erreur lors du chargement des clients:', error);
    }
}

/**
 * Remplir la liste d√©roulante des statuts
 */
function populateStatutSelect() {
    const select = document.getElementById('depot-status-id');
    
    if (!select) return;
    
    select.innerHTML = '<option value="">S√©lectionner un statut...</option>';
    
    statutsListData.forEach(statut => {
        const option = document.createElement('option');
        option.value = statut.id;
        option.textContent = statut.nom;
        select.appendChild(option);
    });
}

/**
 * Modifier un d√©p√¥t
 */
function editDepot(depotId) {
    console.log(`‚úèÔ∏è Modification du d√©p√¥t ${depotId}`);
    // √Ä impl√©menter quand la table depots sera cr√©√©e
    showNotification('Fonction de modification des d√©p√¥ts en cours de d√©veloppement', 'info');
}

/**
 * Voir les d√©tails d'un d√©p√¥t
 */
function viewDepot(depotId) {
    console.log(`üëÅÔ∏è Visualisation du d√©p√¥t ${depotId}`);
    const depot = depotsListData.find(d => d.id === depotId);
    
    if (depot) {
        const details = `
D√©tails du d√©p√¥t #${depot.id}:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Client: ${depot.client_nom}
Description: ${depot.description}
Statut: ${depot.statut_nom}
Date de d√©p√¥t: ${formatDate(depot.date_depot)}
Date pr√©vue: ${formatDate(depot.date_prevue)}
        `;
        
        alert(details);
    }
}

/**
 * G√©n√©rer un PDF pour un d√©p√¥t
 */
function generatePDF(depotId) {
    console.log(`üìÑ G√©n√©ration PDF pour le d√©p√¥t ${depotId}`);
    // √Ä impl√©menter quand la g√©n√©ration PDF sera pr√™te
    showNotification('G√©n√©ration PDF en cours de d√©veloppement', 'info');
}

/**
 * Supprimer un d√©p√¥t
 */
function deleteDepot(depotId) {
    console.log(`üóëÔ∏è Suppression du d√©p√¥t ${depotId}`);
    
    const depot = depotsListData.find(d => d.id === depotId);
    if (!depot) return;
    
    if (confirm(`√ätes-vous s√ªr de vouloir supprimer le d√©p√¥t #${depotId} ?\n\nCette action est irr√©versible.`)) {
        // √Ä impl√©menter quand l'API depots sera pr√™te
        showNotification('Fonction de suppression des d√©p√¥ts en cours de d√©veloppement', 'info');
    }
}

/**
 * Fermer la modale d√©p√¥t
 */
function closeDepotModal() {
    const modal = document.getElementById('depot-modal');
    if (modal) {
        modal.style.display = 'none';
    }
    
    currentEditingDepotData = null;
    
    const form = document.getElementById('depot-form');
    if (form) {
        form.reset();
    }
}

/**
 * Sauvegarder un d√©p√¥t
 */
function saveDepot() {
    console.log('üíæ Sauvegarde du d√©p√¥t...');
    // √Ä impl√©menter quand l'API depots sera pr√™te
    showNotification('Fonction de sauvegarde des d√©p√¥ts en cours de d√©veloppement', 'info');
}

/**
 * Formater une date pour l'affichage
 */
function formatDate(dateString) {
    if (!dateString) return 'Non d√©finie';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('fr-FR');
    } catch (error) {
        return dateString;
    }
}

const loadClientsTable = () => {
    console.log('üìã Chargement du tableau des clients...');
    // Rediriger vers la fonction des clients
    if (typeof loadClients === 'function') {
        loadClients();
    } else {
        console.warn('‚ö†Ô∏è Fonction loadClients non disponible');
    }
};

// Fonction applyDepotFilters pour √©viter les conflits
const applyDepotFiltersCompat = () => {
    console.log('üîç Application des filtres d√©p√¥ts...');
    filterDepots();
};

// Initialiser au chargement du DOM
document.addEventListener('DOMContentLoaded', function() {
    // Attendre que l'API soit disponible
    setTimeout(() => {
        if (typeof API !== 'undefined') {
            initializeDepots();
        } else {
            console.warn('‚ö†Ô∏è API non disponible pour les d√©p√¥ts');
        }
    }, 1000);
});