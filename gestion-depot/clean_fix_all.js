/**
 * CORRECTIF COMPLET SANS CONFLITS
 * Remplace TOUS les fichiers probl√©matiques d'un coup
 * √Ä charger √Ä LA PLACE de client-functions.js, depot-functions.js et load_functions_fix.js
 */

console.log('üîß CORRECTIF COMPLET - Chargement...');

// ================================
// VARIABLES GLOBALES UNIQUES
// ================================
const AppData = {
    clients: [],
    depots: [],
    statuts: [],
    currentEditingClient: null,
    currentEditingDepot: null
};

// ================================
// FONCTIONS CLIENTS
// ================================
window.loadClients = async function() {
    console.log('üì• Chargement des clients...');
    
    try {
        const response = await API.clients.getAll();
        
        if (response.success) {
            AppData.clients = response.data;
            console.log(`‚úÖ ${AppData.clients.length} clients charg√©s`);
        } else {
            console.error('‚ùå Erreur clients:', response.error);
        }
    } catch (error) {
        console.error('‚ùå Erreur chargement clients:', error);
        AppData.clients = [];
    }
};

window.loadClientsTable = async function() {
    console.log('üë• Chargement tableau clients...');
    
    try {
        const response = await API.clients.getAll({ limit: 100 });
        
        if (response.success && response.data) {
            const tbody = document.getElementById('clients-tbody');
            
            if (tbody) {
                tbody.innerHTML = response.data.map(client => `
                    <tr>
                        <td>${client.id}</td>
                        <td>${client.prenom || ''}</td>
                        <td>${client.nom || ''}</td>
                        <td>${client.email || 'Non renseign√©'}</td>
                        <td>${client.telephone || 'Non renseign√©'}</td>
                        <td>
                            <button class="btn btn-sm btn-primary" onclick="editClientAction(${client.id})" title="Modifier">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-info" onclick="viewClientAction(${client.id})" title="Voir d√©tails">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteClientAction(${client.id})" title="Supprimer">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');
                
                console.log(`‚úÖ ${response.data.length} clients affich√©s`);
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur tableau clients:', error);
    }
};

window.editClientAction = async function(clientId) {
    console.log(`‚úèÔ∏è Modification client ${clientId}`);
    
    try {
        const response = await API.clients.getById(clientId);
        
        if (response.success) {
            const client = response.data;
            const newName = prompt(`Modifier le nom du client:\n\nNom actuel: ${client.nom}\nNouveau nom:`, client.nom || '');
            
            if (newName && newName !== client.nom) {
                const updateResponse = await API.clients.update(clientId, { ...client, nom: newName });
                
                if (updateResponse.success) {
                    showNotificationFixed('Client modifi√© avec succ√®s', 'success');
                    await window.loadClientsTable();
                } else {
                    showNotificationFixed('Erreur lors de la modification', 'error');
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur modification client:', error);
        showNotificationFixed('Erreur lors de la modification', 'error');
    }
};

window.viewClientAction = async function(clientId) {
    console.log(`üëÅÔ∏è Visualisation client ${clientId}`);
    
    try {
        const response = await API.clients.getById(clientId);
        
        if (response.success) {
            const client = response.data;
            const details = `
üßë‚Äçüíº D√âTAILS DU CLIENT
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã ID: ${client.id}
üë§ Nom: ${client.prenom || ''} ${client.nom || ''}
üìß Email: ${client.email || 'Non renseign√©'}
üì± T√©l√©phone: ${client.telephone || 'Non renseign√©'}
üè† Adresse: ${client.adresse || 'Non renseign√©'}
üìÆ Code postal: ${client.code_postal || 'Non renseign√©'}
üèôÔ∏è Ville: ${client.ville || 'Non renseign√©'}
            `;
            
            alert(details);
        }
    } catch (error) {
        console.error('‚ùå Erreur visualisation client:', error);
    }
};

window.deleteClientAction = async function(clientId) {
    console.log(`üóëÔ∏è Suppression client ${clientId}`);
    
    try {
        const response = await API.clients.getById(clientId);
        
        if (response.success) {
            const client = response.data;
            const clientName = `${client.prenom || ''} ${client.nom || ''}`.trim() || `Client #${client.id}`;
            
            if (confirm(`‚ö†Ô∏è ATTENTION ‚ö†Ô∏è\n\nSupprimer ${clientName} ?\n\n‚ùå Action IRR√âVERSIBLE !`)) {
                const deleteResponse = await API.clients.delete(clientId);
                
                if (deleteResponse.success) {
                    showNotificationFixed(`Client ${clientName} supprim√©`, 'success');
                    await window.loadClientsTable();
                } else {
                    showNotificationFixed('Erreur lors de la suppression', 'error');
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur suppression client:', error);
        showNotificationFixed('Erreur lors de la suppression', 'error');
    }
};

// ================================
// FONCTIONS D√âP√îTS  
// ================================
window.loadDepots = async function() {
    console.log('üì¶ Chargement des d√©p√¥ts...');
    
    try {
        if (API.depots && API.depots.getAll) {
            const response = await API.depots.getAll();
            
            if (response.success) {
                AppData.depots = response.data;
                displayDepotsFixed(AppData.depots);
                console.log(`‚úÖ ${AppData.depots.length} d√©p√¥ts charg√©s`);
                return;
            }
        }
        
        // D√©p√¥ts de test si API pas disponible
        AppData.depots = [
            {
                id: 1,
                client_nom: 'Client Test 1',
                description: 'Ordinateur portable - Probl√®me d√©marrage',
                statut_nom: 'En attente',
                statut_couleur: '#ffc107',
                date_depot: '2025-01-01',
                date_prevue: '2025-01-05'
            },
            {
                id: 2,
                client_nom: 'Client Test 2',
                description: 'Smartphone - √âcran cass√©',
                statut_nom: 'En cours',
                statut_couleur: '#17a2b8',
                date_depot: '2024-12-30',
                date_prevue: '2025-01-03'
            }
        ];
        
        displayDepotsFixed(AppData.depots);
        console.log(`‚úÖ ${AppData.depots.length} d√©p√¥ts de test affich√©s`);
        
    } catch (error) {
        console.error('‚ùå Erreur chargement d√©p√¥ts:', error);
        displayDepotsFixed([]);
    }
};

function displayDepotsFixed(depots) {
    const tbody = document.getElementById('depots-tbody');
    
    if (!tbody) {
        console.warn('‚ö†Ô∏è Table depots-tbody non trouv√©e');
        return;
    }
    
    if (!depots || depots.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">
                    <div style="padding: 20px;">
                        <p><strong>Aucun d√©p√¥t pour le moment</strong></p>
                        <p style="color: #666;">La table des d√©p√¥ts sera cr√©√©e apr√®s configuration compl√®te</p>
                        <button class="btn btn-primary" onclick="showNotificationFixed('Fonctionnalit√© en d√©veloppement', 'info')">
                            Ajouter un d√©p√¥t de test
                        </button>
                    </div>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = depots.map(depot => `
        <tr>
            <td>${depot.id}</td>
            <td>${depot.client_nom || 'Client inconnu'}</td>
            <td>${depot.description || ''}</td>
            <td>
                <span class="badge" style="background-color: ${depot.statut_couleur || '#007bff'}; color: white; padding: 4px 8px; border-radius: 4px;">
                    ${depot.statut_nom || 'Non d√©fini'}
                </span>
            </td>
            <td>${formatDateFixed(depot.date_depot)}</td>
            <td>${formatDateFixed(depot.date_prevue)}</td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="showNotificationFixed('Fonction en d√©veloppement', 'info')" title="Modifier">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-info" onclick="viewDepotAction(${depot.id})" title="Voir d√©tails">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-sm btn-success" onclick="showNotificationFixed('PDF en d√©veloppement', 'info')" title="G√©n√©rer PDF">
                    <i class="fas fa-file-pdf"></i>
                </button>
            </td>
        </tr>
    `).join('');
}

window.viewDepotAction = function(depotId) {
    const depot = AppData.depots.find(d => d.id === depotId);
    
    if (depot) {
        const details = `
üì¶ D√âTAILS DU D√âP√îT #${depot.id}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üë§ Client: ${depot.client_nom}
üìù Description: ${depot.description}
üè∑Ô∏è Statut: ${depot.statut_nom}
üìÖ Date d√©p√¥t: ${formatDateFixed(depot.date_depot)}
‚è∞ Date pr√©vue: ${formatDateFixed(depot.date_prevue)}
        `;
        
        alert(details);
    }
};

window.filterDepots = function(filterType = 'all') {
    console.log(`üîç Filtrage d√©p√¥ts: ${filterType}`);
    
    let filteredDepots = [...AppData.depots];
    
    switch (filterType) {
        case 'en_attente':
            filteredDepots = AppData.depots.filter(depot => depot.statut_nom === 'En attente');
            break;
        case 'en_cours':
            filteredDepots = AppData.depots.filter(depot => depot.statut_nom === 'En cours');
            break;
        case 'pret':
            filteredDepots = AppData.depots.filter(depot => depot.statut_nom === 'Pr√™t');
            break;
        case 'recupere':
            filteredDepots = AppData.depots.filter(depot => depot.statut_nom === 'R√©cup√©r√©');
            break;
    }
    
    displayDepotsFixed(filteredDepots);
    console.log(`üìä ${filteredDepots.length} d√©p√¥ts affich√©s`);
};

window.applyDepotFilters = function() {
    console.log('üîç Application filtres d√©p√¥ts...');
    window.filterDepots();
};

// ================================
// FONCTIONS DASHBOARD
// ================================
window.loadDashboardData = async function() {
    console.log('üìä Chargement dashboard...');
    
    try {
        if (API.stats && API.stats.getDashboard) {
            const response = await API.stats.getDashboard();
            
            if (response.success) {
                updateDashboardFixed(response.data);
                console.log('‚úÖ Dashboard mis √† jour:', response.data);
                return;
            }
        }
        
        // Calcul manuel si API pas disponible
        const clientsResponse = await API.clients.getAll();
        const totalClients = clientsResponse.success ? (clientsResponse.total || clientsResponse.data.length) : 0;
        
        const stats = {
            totalClients: totalClients,
            totalDepots: AppData.depots.length,
            depotsEnAttente: AppData.depots.filter(d => d.statut_nom === 'En attente').length,
            depotsEnCours: AppData.depots.filter(d => d.statut_nom === 'En cours').length,
            depotsPrets: AppData.depots.filter(d => d.statut_nom === 'Pr√™t').length,
            depotsTermines: AppData.depots.filter(d => d.statut_nom === 'R√©cup√©r√©').length
        };
        
        updateDashboardFixed(stats);
        console.log('‚úÖ Dashboard calcul√©:', stats);
        
    } catch (error) {
        console.error('‚ùå Erreur dashboard:', error);
        updateDashboardFixed({
            totalClients: 0,
            totalDepots: 0,
            depotsEnAttente: 0,
            depotsEnCours: 0,
            depotsPrets: 0,
            depotsTermines: 0
        });
    }
};

function updateDashboardFixed(stats) {
    const mappings = {
        'total-clients': stats.totalClients || 0,
        'total-depots': stats.totalDepots || 0,
        'depots-en-attente': stats.depotsEnAttente || 0,
        'depots-en-cours': stats.depotsEnCours || 0,
        'depots-prets': stats.depotsPrets || 0,
        'depots-termines': stats.depotsTermines || 0
    };
    
    Object.entries(mappings).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            const numberElement = element.querySelector('.stat-number') || element;
            numberElement.textContent = value;
            console.log(`‚úÖ ${id}: ${value}`);
        }
    });
}

// ================================
// FONCTIONS S√âLECTEURS
// ================================
window.populateAllClientSelects = async function() {
    console.log('üë• Remplissage s√©lecteurs clients...');
    
    try {
        const response = await API.clients.getAll({ limit: 500 });
        
        if (!response.success) return;
        
        const clients = response.data;
        const clientSelects = document.querySelectorAll('select[id*="client"], select[name*="client"]');
        
        console.log(`üîç ${clientSelects.length} s√©lecteurs trouv√©s pour ${clients.length} clients`);
        
        clientSelects.forEach((select, index) => {
            select.innerHTML = '<option value="">S√©lectionner un client...</option>';
            
            clients.forEach(client => {
                const option = document.createElement('option');
                option.value = client.id;
                
                let displayName = '';
                if (client.prenom && client.nom) {
                    displayName = `${client.prenom} ${client.nom}`;
                } else if (client.nom) {
                    displayName = client.nom;
                } else {
                    displayName = `Client #${client.id}`;
                }
                
                if (client.ville) {
                    displayName += ` - ${client.ville}`;
                }
                
                option.textContent = displayName;
                select.appendChild(option);
            });
            
            console.log(`‚úÖ S√©lecteur ${index + 1} rempli`);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur remplissage s√©lecteurs:', error);
    }
};

// ================================
// FONCTIONS ARCHIVES ET AUTRES
// ================================
window.loadArchives = function() {
    console.log('üìÅ Chargement archives...');
    const tbody = document.getElementById('archives-tbody');
    if (tbody) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Fonctionnalit√© archives en cours de d√©veloppement</td></tr>';
    }
};

window.loadStatutsTable = function() {
    console.log('üè∑Ô∏è Chargement statuts...');
    const tbody = document.getElementById('statuts-tbody');
    if (tbody) {
        tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Fonctionnalit√© statuts en cours de d√©veloppement</td></tr>';
    }
};

window.loadAdminData = function() {
    console.log('‚öôÔ∏è Chargement admin...');
};

// ================================
// FONCTIONS UTILITAIRES
// ================================
function formatDateFixed(dateString) {
    if (!dateString) return 'Non d√©finie';
    
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('fr-FR');
    } catch (error) {
        return dateString;
    }
}

function showNotificationFixed(message, type = 'info') {
    console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
    
    let notification = document.getElementById('notification-fixed');
    
    if (!notification) {
        notification = document.createElement('div');
        notification.id = 'notification-fixed';
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            max-width: 350px;
            word-wrap: break-word;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;
        document.body.appendChild(notification);
    }
    
    const colors = {
        success: '#28a745',
        error: '#dc3545',
        warning: '#ffc107',
        info: '#17a2b8'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    notification.textContent = message;
    notification.style.display = 'block';
    
    setTimeout(() => {
        notification.style.display = 'none';
    }, 4000);
}

// ================================
// INITIALISATION AUTOMATIQUE
// ================================
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(async () => {
        console.log('üöÄ Initialisation automatique...');
        
        if (typeof API !== 'undefined') {
            try {
                await window.loadClients();
                await window.loadDepots();
                await window.loadDashboardData();
                await window.populateAllClientSelects();
                
                console.log('‚úÖ Initialisation compl√®te termin√©e');
            } catch (error) {
                console.error('‚ùå Erreur initialisation:', error);
            }
        }
    }, 3000);
});

console.log('‚úÖ CORRECTIF COMPLET charg√©'); 